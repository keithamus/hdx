---
source: crates/hdx_proc_macro/src/test.rs
expression: pretty
---
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo<'a> {
    Auto(::hdx_parser::T![Ident]),
    AnimateableFeatures(
        ::bumpalo::collections::Vec<
            'a,
            (types::AnimateableFeature, Option<::hdx_parser::T![,]>),
        >,
    ),
}
#[automatically_derived]
impl<'a> ::hdx_parser::Peek<'a> for Foo<'a> {
    fn peek(p: &::hdx_parser::Parser<'a>) -> bool {
        use ::hdx_parser::Peek;
        p.peek::<::hdx_parser::T![Ident]>() || p.peek::<types::AnimateableFeature>()
    }
}
#[automatically_derived]
impl<'a> ::hdx_parser::Parse<'a> for Foo<'a> {
    fn parse(p: &mut ::hdx_parser::Parser<'a>) -> ::hdx_parser::Result<Self> {
        use ::hdx_parser::Parse;
        if p.peek::<::hdx_parser::T![Ident]>() {
            let c = p.peek_n(1);
            match p.parse_atom_lower(c) {
                ::hdx_atom::atom!("auto") => {
                    return Ok(Self::Auto(p.parse::<::hdx_parser::T![Ident]>()?));
                }
                atom => {}
            }
        }
        let mut val = ::bumpalo::collections::Vec::new_in(p.bump());
        loop {
            let item = p.parse::<types::AnimateableFeature>()?;
            let comma = p.parse_if_peek::<::hdx_parser::T![,]>()?;
            val.push((item, comma));
            if comma.is_none() {
                break;
            }
        };
        Ok(Self::AnimateableFeatures(val))
    }
}
#[automatically_derived]
impl<'a> ::hdx_parser::ToCursors for Foo<'a> {
    fn to_cursors(&self, s: &mut impl ::hdx_parser::CursorSink) {
        match self {
            Self::Auto(inner) => {
                s.append(inner.into());
            }
            Self::AnimateableFeatures(inner) => {
                for item in inner {
                    let (item, comma) = item;
                    ::hdx_parser::ToCursors::to_cursors(item, s);
                    if let Some(comma) = comma {
                        s.append(comma.into());
                    }
                }
            }
        }
    }
}
