---
source: crates/hdx_proc_macro/src/test.rs
expression: pretty
---
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize), serde())]
enum Foo {
    FitContent(::hdx_parser::T![Ident]),
    FitContentFunction(
        ::hdx_parser::T![Function],
        types::LengthPercentage,
        Option<::hdx_parser::T![')']>,
    ),
}
#[automatically_derived]
impl<'a> ::hdx_parser::Peek<'a> for Foo {
    fn peek(p: &::hdx_parser::Parser<'a>) -> bool {
        use ::hdx_parser::Peek;
        p.peek::<::hdx_parser::T![Ident]>() || p.peek::<::hdx_parser::T![Function]>()
    }
}
#[automatically_derived]
impl<'a> ::hdx_parser::Parse<'a> for Foo {
    fn parse(p: &mut ::hdx_parser::Parser<'a>) -> ::hdx_parser::Result<Self> {
        use ::hdx_parser::Parse;
        if p.peek::<::hdx_parser::T![Ident]>() {
            let c = p.peek_n(1);
            match p.parse_atom_lower(c) {
                ::hdx_atom::atom!("fit-content") => {
                    return Ok(Self::FitContent(p.parse::<::hdx_parser::T![Ident]>()?));
                }
                atom => {}
            }
        }
        let function = p.parse::<::hdx_parser::T![Function]>()?;
        let c: hdx_lexer::Cursor = function.into();
        let atom = p.parse_atom_lower(c.into());
        if atom != ::hdx_atom::atom!("fit-content") {
            return Err(::hdx_parser::diagnostics::UnexpectedFunction(atom, c.into()))?;
        }
        let start = p.offset();
        let val = p.parse::<types::LengthPercentage>()?;
        let valf32: f32 = val.into();
        if 0f32 > valf32 {
            return Err(
                ::hdx_parser::diagnostics::NumberTooSmall(
                    0f32,
                    ::hdx_lexer::Span::new(start, p.offset()),
                ),
            )?;
        }
        let close = p.parse_if_peek::<::hdx_parser::T![')']>()?;
        Ok(Self::FitContentFunction(function, val, close))
    }
}
#[automatically_derived]
impl ::hdx_parser::ToCursors for Foo {
    fn to_cursors(&self, s: &mut impl ::hdx_parser::CursorSink) {
        match self {
            Self::FitContent(inner) => {
                s.append(inner.into());
            }
            Self::FitContentFunction(function, val, close) => {
                s.append(function.into());
                ::hdx_parser::ToCursors::to_cursors(val, s);
                if let Some(close) = close {
                    s.append(close.into());
                }
            }
        }
    }
}
